// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const Discord 	= require('discord.js');
const fs		= require('fs')
const rpsTolal	= require('./rps.json')
const jimp 		= require('jimp');


//-----------------------------------------//
// –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var randomColor     	= '#' + ("000000" + Math.random().toString(16).slice(2, 8).toUpperCase()).slice(-6); // generate random hex color
var answer          	= "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ";
let anserDescription	= `–ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–∫ –Ω–∏–∂–µ.`
let result          	= [0,0]
let wordArr				= ['–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞']
let symbolArr			= ['794933561739706408', '794933561337184277','794933561685835806', '794954406747439135']
let pictureArr			= ["./img/stone.png", "./img/scissors.png", "./img/paper.png", "./img/reset.png"]
//-----------------------------------------//
// –ü—Ä–æ—Ü–µ—Å—Å—ã
async function main(client, message,result){		//–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	result = (!result)?[0,0]:result

	var randomColor = '#' + ("000000" + Math.random().toString(16).slice(2, 8).toUpperCase()).slice(-6); // generate random hex color
	const embed = new Discord.MessageEmbed() 	//–°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		.setColor(randomColor)					//–£–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –ª–µ–≤–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å–∫–∏
		.setTitle('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞')	//–ó–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞
		.setDescription('–í—ã –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –±–æ—Ç –≤ –æ—Ç–≤–µ—Ç –≤—ã–¥–∞—ë—Ç —Ç–∞–∫–æ–π –∂–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –ø–æ–±–µ–¥–∏—Ç–µ–ª –Ω–∞—Å—á–∏—Å–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω –±–∞–ª.')
		.setThumbnail('https://avatars.mds.yandex.net/get-dialogs/758954/2fa17e69fbe35a68007f/orig')
		.addFields(								//–ù–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ —è —Ö–æ—á—É –ø–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç –∏–≥—Ä –ø–æ—Å–ª–µ —Å–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞
			{ name: result[0], value: '–í—ã' , inline: true },
			{ name: result[1], value: '–ë–æ—Ç', inline: true }
		)
		.addField(answer, anserDescription, false)	//–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã, –∏ –∫—Ç–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª.
	const newMess= await message.channel.send(embed)//–æ—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
								//–î–æ–±–∞–≤–ª—è—é —Ä–µ–∞–∫—Ü–∏—è–º–∏ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å —Å–∞–º–æ–º—É –∏—Ö –∏—Å–∫–∞—Ç—å
	client.channels.cache.get(message.channel.id).messages.cache.get(newMess.id).react(client.emojis.cache.get(symbolArr[0]));
	client.channels.cache.get(message.channel.id).messages.cache.get(newMess.id).react(client.emojis.cache.get(symbolArr[1]));
	client.channels.cache.get(message.channel.id).messages.cache.get(newMess.id).react(client.emojis.cache.get(symbolArr[2]));
	client.channels.cache.get(message.channel.id).messages.cache.get(newMess.id).react(client.emojis.cache.get(symbolArr[3]));
	id = message.channel.id
	


}
const rand = ()=>{return Math.floor(Math.random()*3)};	//–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –Ω—É–ª—è –¥–æ –¥–≤—É—Ö
function useBot(client, react){
	var random = rand()
	random=random++
	(random==3)?random=0:random
	const startM = (react.message.embeds.length==1)?main:canv
	if(symbolArr.indexOf(react._emoji.id)==-1){		//–ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö
		console.log("–ª–∏—à–Ω—è—è —Ä–µ–∞–∫—Ü–∏—è");
		return
	}else if(react._emoji.id == symbolArr[3]){		//–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Å–±—Ä–æ—Å
		result          = [0,0]						//–û–±–Ω—É–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
		answer = "–°—á–µ—Ç —Å–±—Ä–æ—à–µ–Ω";
		anserDescription=`–ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–∫ –Ω–∏–∂–µ.`
		console.log(answer);
		saveTotal(react.message.channel.id, result)
		startM(client, react.message)					//–≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	}else{											//–ì–ª–∞–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
		resultShort = react._emoji.name[1]+client.emojis.cache.get(symbolArr[random]).name[1];	//–ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ 
		// console.log("üöÄ ~ file: rockPaperScissors.js ~ line 58 ~ useBot ~ resultShort", resultShort)
																								//–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–æ—Ç–æ–º, 
																								//–±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, 
																								//—Å–æ–µ–¥–∏–Ω—è–µ–º
		anserDescription = `–í—ã –≤—ã–±—Ä–∞–ª–∏ **${wordArr[symbolArr.indexOf(react._emoji.id)]}**. –ë–æ—Ç –≤—ã–±—Ä–∞–ª **${wordArr[random]}**` //–£–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, —á—Ç–æ –æ–Ω–∏ –≤—ã–±—Ä–∞–ª–∏
		// youSymbol =((wordArr[symbolArr.indexOf(react._emoji.id)])*2)-1
		// botSymbol = (wordArr[random])-1
		anserArrSymbol= [pictureArr[symbolArr.indexOf(react._emoji.id)],(pictureArr[random])]
        // console.log("üöÄ ~ file: rockPaperScissors.js ~ line 66 ~ useBot ~ anserArrSymbol", anserArrSymbol)
		var mapIter = react.users.cache.entries()
		mapIter.next().value
		// console.log("üöÄ ~ file: rockPaperScissors.js ~ line 75 ~ useBot ~ 		react.users.cache.entries().next().value",mapIter.next().value[1].username)
		username = mapIter.next().value[1].username
		winner(resultShort, username);		//–í—ã–∑—ã–≤–∞–µ–º switch-–ø—Ä–æ—Ü–µ—Å—Å, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
		result = (!rpsTolal.channel[react.message.channel.id])?[0,0]:rpsTolal.channel[react.message.channel.id]
		result[0]=result[0]+winArr[0];				//–ü–ª—é—Å—É–µ–º 0 –∏–ª–∏ 1 –∫ —Å—Ç–∞—Ä–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
		result[1]=result[1]+winArr[1]
		saveTotal(react.message.channel.id, result)
		startM(client, react.message, result)
		// canv(client, react.message, result)
		// main(client, react.message, result)					//–í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç–∂–µ –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ —É–∂–µ —Å –Ω–æ–≤—ã–º–∏ (–Ω–µ –Ω—É–ª–µ–≤—ã–º–∏) —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
	}
		
}
function winner(r, author){
	winArr = [];
	answer = ""
	switch (r) {
		case "tt":
		case "cc":
		case "aa":
			winArr=[0,0]
			answer = "–ù–∏—á—å—è"
			break;
		case "tc":
		case "ca":
		case "at":
			winArr=[1,0]
			answer = "–ü–æ–±–µ–∂–¥–∞–µ—Ç "+author
			break;
		case "ct":
		case "ac":
		case "ta":
			winArr=[0,1]
			answer = "–ü–æ–±–µ–∂–¥–∞–µ—Ç –ö–æ–º–ø—å—é—Ç–µ—Ä"
			break;
		default:
			break;
	}
}
function saveTotal(id, result){
	if(!rpsTolal.channel[id]){
		result = [0,0]
		rpsTolal.channel[id]=[0,0]
		fs.writeFile("rps.json",JSON.stringify(rpsTolal),function(err){ 
			if(err) console.log(err)
		})
	}else{
		rpsTolal.channel[id] =result
		fs.writeFile("rps.json",JSON.stringify(rpsTolal),function(err){ 
			if(err) console.log(err)
		})
	}

}

async function canv(client, message, result) {
	const font25 = await jimp.loadFont('./modules/fonts/font25/font.fnt'); 
	const font20 = await jimp.loadFont('./modules/fonts/font20/font20.fnt');
	const font15 = await jimp.loadFont('./modules/fonts/font15/font15.fnt'); 
	const font42 = await jimp.loadFont('./modules/fonts/font42/font.fnt');
	if(!result){
		// console.log(1);
		result = [0,0]; 
		anserDescription = "–ü—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–∫ –Ω–∏–∂–µ.\r –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞."
		const bg0 = await jimp.read(`./img/alert-background.jpg`) 
		// const font25 = await jimp.loadFont('./modules/fonts/font25/font.fnt'); 
		// const font20 = await jimp.loadFont('./modules/fonts/font20/font20.fnt');
		// const font15 = await jimp.loadFont('./modules/fonts/font15/font15.fnt'); 
		// const font42 = await jimp.loadFont('./modules/fonts/font42/font.fnt'); 

		bg0.print(font25,275,170,{text: answer});
		bg0.print(font20,165,203,{text: "–ü—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–∫ –Ω–∏–∂–µ. –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã "});
		bg0.print(font20,220,226,{text: "–∏–ª–∏ –±—É–º–∞–≥–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –æ—Ç–≤–µ—Ç, "});
		bg0.print(font20,135,249,{text: "–ë–æ—Ç –≤—ã–±–µ—Ä–µ—Ç —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –≤—ã–¥–∞—Å—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"});
		bg0.print(font20,255,272,{text: "—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."});
		bg0.print(font15,180,310,{text: "(–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞. –ù–∏–∫–∞–∫–æ–π –ø–æ–¥–∫—Ä—É—Ç–∫–∏ –Ω–µ—Ç, —Ç.–∫. –ø—Ä–æ—Å—Ç–æ –Ω–µ–∑–∞—á–µ–º))))"});
		// bg.print(font42,200,365,{text: String(result[0])});
		// bg.print(font42,565,365,{text: String(result[1])});  
		bg0.write(`result.jpg`);
		// bg0.getBuffer(jimp.AUTO , cb=>console.log(cb))
		// console.log(bg);
		// result = bg0.getBuffer(jimp.AUTO , cb=>console.log(cb))

	}else{
		const bg = await jimp.read(`./img/total-background.jpg`)
		const youSym= await jimp.read(anserArrSymbol[0])
		const botSym= await jimp.read(anserArrSymbol[1])
		bg.composite(youSym,195, 230)
		bg.composite(botSym,555, 230)
		// answer = "–ü–æ–±–µ–∂–¥–∞–µ—Ç –ö–æ–º–ø—å—é—Ç–µ—Ä"//–ù–µ–∑–∞–±—ã—Ç—å —É–±—Ä–∞—Ç—å
		bg.print(font25,275,160,{text: answer});
		
		bg.print(font42,200,365,{text: String(result[0])});
		bg.print(font42,565,365,{text: String(result[1])});
		bg.write(`result.jpg`);  
		result = bg.getBuffer(jimp.AUTO , cb=>console.log(cb))
	}
	message.channel.send({
		files: [{
		  attachment: 'result.jpg',
		  name: 'result.jpg'
		}]
	}).then(m=>{
		m.react(client.emojis.cache.get(symbolArr[0]));
		m.react(client.emojis.cache.get(symbolArr[1]));
		m.react(client.emojis.cache.get(symbolArr[2]));
		m.react(client.emojis.cache.get(symbolArr[3]));
	})
}
// await canv();
//----------------------------------------//
// –≠–∫—Å–ø–æ—Ä—Ç—ã
module.exports.main 	= main
module.exports.useBot 	= useBot
module.exports.canv 	= canv


//----------------------------------------//
